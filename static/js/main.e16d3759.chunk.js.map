{"version":3,"sources":["componentes/Arrivals/index.js","componentes/Departures/index.js","componentes/GoogleMaps/index.js","Api.js","App.js","serviceWorker.js","index.js"],"names":["Arrivals","props","arrivals","length","Fragment","Table","striped","bordered","hover","size","className","map","item","key","onlyTime","moment","dateTime","format","OverlayTrigger","delay","trigger","placement","overlay","Popover","Title","as","Content","JSON","stringify","track","decodeURIComponent","name","origin","Departures","departures","GoogleMaps","bootstrapURLKeys","process","center","lat","lng","defaultZoom","distanceToMouse","TOKEN","REACT_APP_TOKEN","axios","create","baseURL","headers","Authorization","now","defaultCenter","App","useState","isLoading","setIsLoading","options","setOptions","setLat","setlng","setName","setArrivals","setDepartures","arrivalsError","setArrivalsErrors","departuresError","setDeparturesErrors","handleSearch","query","a","Api","get","response","parsedOpt","data","id","lon","console","log","handleChange","Promise","all","handleArrivals","handleDepartures","date","title","message","Container","fluid","Row","Col","xs","md","style","boxShadow","overflowY","overFlowY","zIndex","Form","Group","controlId","labelKey","minLength","onSearch","onChange","placeholder","renderMenuItemChildren","option","_","isEmpty","Alert","variant","Heading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e16d3759.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport moment from \"moment\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\n\r\nfunction Arrivals(props) {\r\n  if (props.arrivals.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h5>Arrivals</h5>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">Track</th>\r\n            <th>Name</th>\r\n            <th>Origin</th>\r\n            <th>Time</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.arrivals.map((item, key) => {\r\n            const onlyTime = moment(item.dateTime).format(\"HH:mm\");\r\n            return (\r\n              <OverlayTrigger\r\n                delay={1000}\r\n                key={key}\r\n                trigger=\"hover\"\r\n                placement=\"right\"\r\n                overlay={\r\n                  <Popover>\r\n                    <Popover.Title as=\"h3\" className=\"text-dark\">\r\n                      Response Object\r\n                    </Popover.Title>\r\n                    <Popover.Content>\r\n                      <pre>{JSON.stringify(item, null, 2)}</pre>\r\n                    </Popover.Content>\r\n                  </Popover>\r\n                }\r\n              >\r\n                <tr className=\"popover-contained\">\r\n                  <td className=\"text-center\">{item.track}</td>\r\n                  <td>{decodeURIComponent(item.name)}</td>\r\n                  <td>{decodeURIComponent(item.origin)}</td>\r\n                  <td>{onlyTime}</td>\r\n                </tr>\r\n              </OverlayTrigger>\r\n            );\r\n          })}\r\n          <tr></tr>\r\n        </tbody>\r\n      </Table>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Arrivals;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport moment from \"moment\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\n\r\nfunction Departures(props) {\r\n  if (props.departures.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h5>Departures</h5>\r\n      <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"text-center\">Track</th>\r\n            <th>Name</th>\r\n            <th>Origin</th>\r\n            <th>Time</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.departures.map((item, key) => {\r\n            const onlyTime = moment(item.dateTime).format(\"HH:mm\");\r\n            return (\r\n              <OverlayTrigger\r\n                delay={1000}\r\n                key={key}\r\n                trigger=\"hover\"\r\n                placement=\"right\"\r\n                overlay={\r\n                  <Popover>\r\n                    <Popover.Title as=\"h3\" className=\"text-dark\">\r\n                      Response Object\r\n                    </Popover.Title>\r\n                    <Popover.Content>\r\n                      <pre>{JSON.stringify(item, null, 2)}</pre>\r\n                    </Popover.Content>\r\n                  </Popover>\r\n                }\r\n              >\r\n                <tr key={key} className=\"popover-contained\">\r\n                  <td className=\"text-center\">{item.track}</td>\r\n                  <td>{decodeURIComponent(item.name)}</td>\r\n                  <td>{props.origin}</td>\r\n                  <td>{onlyTime}</td>\r\n                </tr>\r\n              </OverlayTrigger>\r\n            );\r\n          })}\r\n          <tr></tr>\r\n        </tbody>\r\n      </Table>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Departures;\r\n","import React from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\n\r\nconst MAPS_KEY = process.env.REACT_APP_MAPS_KEY;\r\n\r\nfunction GoogleMaps(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{\r\n          key: MAPS_KEY,\r\n        }}\r\n        center={{\r\n          lat: props.lat,\r\n          lng: props.lng,\r\n        }}\r\n        defaultZoom={15}\r\n        distanceToMouse={() => {}}\r\n      >\r\n        <div lat={props.lat} lng={props.lng} className=\"mapMaker\">\r\n          <div className=\"inner\">DB</div>\r\n        </div>\r\n      </GoogleMapReact>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default GoogleMaps;\r\n","import axios from \"axios\";\r\n\r\nconst TOKEN = process.env.REACT_APP_TOKEN;\r\nconst APIURL = process.env.REACT_APP_API_URL;\r\n\r\nexport default axios.create({\r\n  baseURL: APIURL,\r\n  headers: { Authorization: `Bearer ${TOKEN}` },\r\n});\r\n","import React, { useState, Fragment } from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Arrivals from \"./componentes/Arrivals\";\nimport Departures from \"./componentes/Departures\";\nimport GoogleMaps from \"./componentes/GoogleMaps\";\nimport Api from \"./Api\";\nimport { AsyncTypeahead } from \"react-bootstrap-typeahead\";\n\nconst now = moment();\nconst defaultCenter = {\n  lat: 50.107149,\n  lng: 8.663785,\n};\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [lat, setLat] = useState(defaultCenter.lat);\n  const [lng, setlng] = useState(defaultCenter.lng);\n  const [name, setName] = useState(\"\");\n  const [arrivals, setArrivals] = useState([]);\n  const [departures, setDepartures] = useState([]);\n  const [arrivalsError, setArrivalsErrors] = useState({});\n  const [departuresError, setDeparturesErrors] = useState({});\n\n  const handleSearch = async (query) => {\n    try {\n      setIsLoading(true);\n      const response = await Api.get(`/location/${query}`);\n      const parsedOpt = response.data.map((item) => {\n        return {\n          name: item.name,\n          id: item.id,\n          lat: item.lat,\n          lon: item.lon,\n        };\n      });\n\n      setOptions(parsedOpt);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange = async (item) => {\n    if (item.length === 0) {\n      return;\n    }\n\n    setLat(item[0].lat);\n    setlng(item[0].lon);\n    setName(item[0].name);\n    const id = item[0].id;\n    await Promise.all[(handleArrivals(id), handleDepartures(id))];\n  };\n\n  const handleArrivals = async (id) => {\n    try {\n      const date = now.format(\"YYYY-MM-DD\");\n      const response = await Api.get(`/arrivalBoard/${id}?date=${date}`);\n      setArrivals(response.data);\n      setArrivalsErrors({});\n    } catch (error) {\n      setArrivalsErrors({\n        title: \"Something went wrong fetching the arrivals\",\n        message: error.message,\n      });\n    }\n  };\n\n  const handleDepartures = async (id) => {\n    try {\n      const date = now.format(\"YYYY-MM-DD\");\n      const response = await Api.get(`/departureBoard/${id}?date=${date}`);\n      setDepartures(response.data);\n      setDeparturesErrors({});\n    } catch (error) {\n      setDeparturesErrors({\n        title: \"Something went wrong fetching the departures\",\n        message: error.message,\n      });\n    }\n  };\n\n  const leftColStyle = {\n    boxShadow: \"0 0 10px #1e2b37\",\n    overflowY: \"auto\",\n    overFlowY: \"hidden\",\n    zIndex: 300,\n  };\n\n  return (\n    <Container fluid className=\"h-100\">\n      <Row className=\"h-100\">\n        <Col xs={12} md={4} style={leftColStyle} className=\"h-100\">\n          <Form className=\"mt-5\">\n            <Form.Group controlId=\"name\">\n              <h5>Location:</h5>\n              <AsyncTypeahead\n                id=\"name\"\n                isLoading={isLoading}\n                labelKey=\"name\"\n                minLength={3}\n                onSearch={handleSearch}\n                onChange={handleChange}\n                options={options}\n                placeholder=\"Search for a DB station...\"\n                renderMenuItemChildren={(option) => {\n                  return (\n                    <Fragment>\n                      <span>{option.name}</span>\n                    </Fragment>\n                  );\n                }}\n              />\n            </Form.Group>\n          </Form>\n          {(!_.isEmpty(departures) || !_.isEmpty(arrivals)) && (\n            <h2 className=\"mt-5 mb-5 text-center\">\n              Schedule for {now.format(\"dddd, MMMM Do YYYY\")}\n            </h2>\n          )}\n          {!_.isEmpty(departuresError) && (\n            <Alert variant=\"danger\">\n              <Alert.Heading>{departuresError.title}</Alert.Heading>\n              <p>{departuresError.message}</p>\n            </Alert>\n          )}\n          <Departures departures={departures} origin={name} />\n          {!_.isEmpty(arrivalsError) && (\n            <Alert variant=\"danger\">\n              <Alert.Heading>{arrivalsError.title}</Alert.Heading>\n              <p>{arrivalsError.message}</p>\n            </Alert>\n          )}\n          <Arrivals arrivals={arrivals} />\n        </Col>\n        <Col xs={12} md={8} className=\"h-100 pr-0 pl-0\">\n          <GoogleMaps lat={lat} lng={lng} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}